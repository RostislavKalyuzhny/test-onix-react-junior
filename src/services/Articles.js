/**
 * @namespace Articles
 */

export default class Articles {
articles = [
  {
    id: 1,
    url_name: 'react',
    name: 'React',
    text: 'React (старі назви: React.js, ReactJS) — відкрита JavaScript бібліотека для створення інтерфейсів користувача, яка покликана вирішувати проблеми часткового оновлення вмісту веб-сторінки, з якими стикаються в розробці односторінкових застосунків. Розробляється Facebook, Instagram і спільнотою індивідуальних розробників. React дозволяє розробникам створювати великі веб-застосунки, які використовують дані, котрі змінюються з часом, без перезавантаження сторінки. Його мета полягає в тому, щоб бути швидким, простим, масштабованим. React обробляє тільки користувацький інтерфейс у застосунках. Це відповідає видові у шаблоні модель-вид-контролер (MVC), і може бути використане у поєднанні з іншими JavaScript бібліотеками або в великих фреймворках MVC, таких як AngularJS. Він також може бути використаний з React на основі надбудов, щоб піклуватися про частини без користувацького інтерфейсу побудови веб-застосунків. Як бібліотеку інтерфейсу користувача React найчастіше використовують разом з іншими бібліотеками, такими як Redux. В даний час React використовують Khan Academy, Netflix, Yahoo, Airbnb, Sony, Atlassian та інші.',
    date: '26.07.2020',
  },
  {
    id: 2,
    url_name: 'java-script',
    name: 'JavaScript',
    text: "JavaScript (JS) — динамічна, об'єктно-орієнтована прототипна мова програмування. Реалізація стандарту ECMAScript. Найчастіше використовується для створення сценаріїв веб-сторінок, що надає можливість на стороні клієнта (пристрої кінцевого користувача) взаємодіяти з користувачем, керувати браузером, асинхронно обмінюватися даними з сервером, змінювати структуру та зовнішній вигляд веб-сторінки. JavaScript класифікують як прототипну (підмножина об'єктно-орієнтованої), скриптову мову програмування з динамічною типізацією. Окрім прототипної, JavaScript також частково підтримує інші парадигми програмування (імперативну та частково функціональну) і деякі відповідні архітектурні властивості, зокрема: динамічна та слабка типізація, автоматичне керування пам'яттю, прототипне наслідування, функції як об'єкти першого класу.",
    date: '19.07.2020',
  },
  {
    id: 3,
    url_name: 'redux-protyi-react-context-api',
    name: 'Redux проти React Context API',
    text: 'У React 16.3 був доданий новий Context API. Новий в тому сенсі, що старий Context API був за кадром, більшість людей або не знали про його існування, або не використовували, тому що документація радила уникати його використання. Однак тепер Context API є повноцінною частиною React, відкритої для використання (не так, як раніше, офіційно).',
    date: '15.07.2020',
  },
  {
    id: 4,
    url_name: 'vvedenia-v-fetch',
    name: 'Введення в fetch',
    text: "Fetch () дозволяє вам робити запити, схожі з XMLHttpRequest (XHR). Основна відмінність полягає в тому, що Fetch API використовує Promises (Обіцянки), які дозволяють використовувати більш просте і чисте API, уникати катастрофічного кількості callback'ов і необхідності пам'ятати API для XMLHttpRequest. Fetch API став доступний користувачам разом з Service Worker'амі в global Скоуп в Chrome 40, проте вже у версії 42 він стане доступний в Скоуп window. Зрозуміло, для всіх інших браузерів, які поки ще не підтримують fetch існує поліфіл на GitHub, який доступний вже сьогодні. Коли ми робимо fetch-запит, відповіді буде дано тип «basic», «cors» або «opaque». Ці «типи» вказують на те, з якого ресурсу прийшли дані і можуть бути використані для того, щоб визначити процес обробки даних. Коли запит зроблено на ресурс, що знаходиться на тому ж origin (мається на увазі, що запит виконується в рамках одного сайту. Прим. Пер.), Відповідь буде містити тип «базовий» і для такого запиту не буде ніяких обмежень. Якщо запит зроблено з одного origin'а на інший (кроссдоменний запит), який, в свою чергу, повернув CORS заголовки, тоді типом буде «cors». Об'єкти з типами «cors» і «basic» майже ідентичні, проте «cors» дещо обмежує метадані, до яких може бути отриманий доступ до «Cache-Control», «Content-Language», «Content-Type», «Expires», «Last-Modified», і «Pragma».",
    date: '18.07.2020',
  },
];

/**
 * Returns objects with the properties needed to display links in articles
 *
 * @memberOf Articles
 * @return {Object} Array of objects with article parameters
 * @example
 *
 * getLinkArticles();
 * => [
 *      {
 *        id: 1,
 *        url_name: 'react',
 *        name: 'React'
 *      },
 *      {
 *        id: 2,
 *        url_name: 'java-script',
 *        name: 'JavaScript'
 *      },
 *      {
 *        ...
 *      }
 *    ]
 */
getLinkArticles() {
  const link = this.articles.map((obj) => ({
    id: obj.id,
    url_name: obj.url_name,
    name: obj.name,
  }));

  return link;
}

/**
 * Return finds article by url_name
 *
 * @memberOf Articles
 * @param  {String} url URL name of article
 * @return {Object} Objects with article parameters
 *
 * @example
 * getArticlesByURL('java-script');
 * => {
        id: 2,
        url_name: 'java-script',
        name: 'JavaScript',
        text: "JavaScript (JS) — динамічна...",
        date: '19.07.2020',
      }
 */
getArticlesByURL(url) {
  const article = this.articles.find((obj) => obj.url_name === url);

  return article;
}
}
